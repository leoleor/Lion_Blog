const e=JSON.parse('{"key":"v-56c5f690","path":"/accumulation/JavaScript/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B.html","title":"异步编程","lang":"zh-CN","frontmatter":{"title":"异步编程","category":["面试"],"tag":["JavaScript"],"star":false,"sticky":false,"article":true,"description":"对Promise的理解 概念 Promise 对象是异步编程的一种解决方案。Promise 是一个构造函数，接收一个函数（executor）作为参数，返回一个 Promise 实例。 一个 Promise 实例有三种状态，分别是pending、fulfilled和rejected，分别代表了进行中、已成功和已失败， 实例的状态只能由 pending 转变 fulfilled 或者 rejected 状态，并且状态一经改变，就凝固了，无法再被改变。 状态改变是通过 resolve() 和 reject() 函数来实现的，可以在异步操作结束后调用这两个函数改变 Promise 实例的状态， 它的原型上定义了一个 then 方法，使用这个 then 方法可以为两个状态的改变注册回调函数。这个回调函数属于微任务，会在本轮事件循环的末尾执行。 注意：在构造 Promise 的时候，构造函数内部的代码是立即执行的。","head":[["meta",{"property":"og:url","content":"https://leoleor.github.io/Lion_Blog/accumulation/JavaScript/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"一只攻城狮"}],["meta",{"property":"og:title","content":"异步编程"}],["meta",{"property":"og:description","content":"对Promise的理解 概念 Promise 对象是异步编程的一种解决方案。Promise 是一个构造函数，接收一个函数（executor）作为参数，返回一个 Promise 实例。 一个 Promise 实例有三种状态，分别是pending、fulfilled和rejected，分别代表了进行中、已成功和已失败， 实例的状态只能由 pending 转变 fulfilled 或者 rejected 状态，并且状态一经改变，就凝固了，无法再被改变。 状态改变是通过 resolve() 和 reject() 函数来实现的，可以在异步操作结束后调用这两个函数改变 Promise 实例的状态， 它的原型上定义了一个 then 方法，使用这个 then 方法可以为两个状态的改变注册回调函数。这个回调函数属于微任务，会在本轮事件循环的末尾执行。 注意：在构造 Promise 的时候，构造函数内部的代码是立即执行的。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-11T09:20:34.000Z"}],["meta",{"property":"article:author","content":"狮子"}],["meta",{"property":"article:tag","content":"JavaScript"}],["meta",{"property":"article:modified_time","content":"2025-03-11T09:20:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"异步编程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-11T09:20:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"狮子\\"}]}"]]},"headers":[{"level":2,"title":"对Promise的理解","slug":"对promise的理解","link":"#对promise的理解","children":[{"level":3,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":3,"title":"优点","slug":"优点","link":"#优点","children":[]},{"level":3,"title":"缺点","slug":"缺点","link":"#缺点","children":[]},{"level":3,"title":"静态方法","slug":"静态方法","link":"#静态方法","children":[]}]},{"level":2,"title":"对async/await的理解","slug":"对async-await的理解","link":"#对async-await的理解","children":[]}],"git":{"createdTime":1741684834000,"updatedTime":1741684834000,"contributors":[{"name":"狮子","email":"hzr1642921219@163.com","commits":1}]},"readingTime":{"minutes":1.72,"words":517},"filePathRelative":"accumulation/JavaScript/异步编程.md","localizedDate":"2025年3月11日","excerpt":"<h2> 对Promise的理解</h2>\\n<h3> 概念</h3>\\n<p>Promise 对象是异步编程的一种解决方案。Promise 是一个构造函数，接收一个函数（executor）作为参数，返回一个 Promise 实例。\\n一个 Promise 实例有三种状态，分别是pending、fulfilled和rejected，分别代表了进行中、已成功和已失败，\\n实例的状态只能由 pending 转变 fulfilled 或者 rejected 状态，并且状态一经改变，就凝固了，无法再被改变。\\n状态改变是通过 resolve() 和 reject() 函数来实现的，可以在异步操作结束后调用这两个函数改变 Promise 实例的状态，\\n它的原型上定义了一个 then 方法，使用这个 then 方法可以为两个状态的改变注册回调函数。这个回调函数属于微任务，会在本轮事件循环的末尾执行。<br>\\n注意：在构造 Promise 的时候，构造函数内部的代码是立即执行的。</p>","autoDesc":true}');export{e as data};
