import{_ as n}from"./vue2_vs_vue3_life-df20c57a.js";import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as e,f as t}from"./app-314573fb.js";const p={},o=t('<h2 id="vue2与vue3的区别" tabindex="-1"><a class="header-anchor" href="#vue2与vue3的区别" aria-hidden="true">#</a> vue2与vue3的区别</h2><h3 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h3><figure><img src="'+n+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>钩子函数加 <code>on</code></li><li><code>beforeCreate</code> 和 <code>created</code> 包含在 <code>setup</code> 函数中</li><li><code>beforeDestroy</code> 改为 <code>onBeforeUnmount</code>，<code>destroyed</code> 改为 <code>onUnmounted</code></li></ul><h3 id="响应式原理" tabindex="-1"><a class="header-anchor" href="#响应式原理" aria-hidden="true">#</a> 响应式原理</h3><ul><li>vue2: Object.defineProperty()</li><li>vue3: Proxy</li></ul><div class="hint-container tip"><p class="hint-container-title">Object.defineProperty()与Proxy的区别</p><ul><li>Object.defineProperty()劫持各个属性的setter和getter；不能监听数组的变化、不能监听新增/删除的属性；初始化的时候需要 <code>深层遍历</code> 每个对象的属性，花费更多时间</li><li>通过Proxy劫持属性；能够拦截数组的变化；监听整个对象，不需要进行遍历属性，优化性能</li></ul></div><h3 id="定义响应式数据" tabindex="-1"><a class="header-anchor" href="#定义响应式数据" aria-hidden="true">#</a> 定义响应式数据</h3><ul><li>vue2：定义在data函数返回的对象里</li><li>vue3：ref定义基本数据类型，reactive定义引用类型</li></ul><h3 id="api层面" tabindex="-1"><a class="header-anchor" href="#api层面" aria-hidden="true">#</a> API层面</h3><ul><li><p>vue2（option API 选项卡式）</p><ul><li>处理数据</li></ul><p>将代码分割到各个钩子函数中（data，methods，watch，computed），导致大型页面和组件后期代码臃肿，难于阅读</p><ul><li>复用逻辑</li></ul><p>通过mixins，缺点：命名空间冲突 &amp; 渲染上下文中暴露的 property 来源不清晰</p></li><li><p>vue3（Composition API 组合式）</p><ul><li>通过set up函数关联</li></ul><p>把处理同一逻辑的操作写在一起，封装成一个函数</p></li></ul><h3 id="多根节点" tabindex="-1"><a class="header-anchor" href="#多根节点" aria-hidden="true">#</a> 多根节点</h3><ul><li>vue2：组件只有一个根节点</li><li>vue3：组件有多个根本节点</li></ul><h3 id="注册组件" tabindex="-1"><a class="header-anchor" href="#注册组件" aria-hidden="true">#</a> 注册组件</h3><ul><li>vue2：组件除了import引入之外，还需要在component里注册</li><li>vue3：借助script set up语法糖，组件只需引入不用注册</li></ul><h3 id="ts的支持度" tabindex="-1"><a class="header-anchor" href="#ts的支持度" aria-hidden="true">#</a> ts的支持度</h3><ul><li>vue2：支持ts需要引入一些额外的库</li><li>vue3：全面支持ts，可以快速使用</li></ul><h3 id="性能方面" tabindex="-1"><a class="header-anchor" href="#性能方面" aria-hidden="true">#</a> 性能方面</h3><ul><li>vue2：它在大型的项目，或者复杂场景下，可能会有一个性能瓶颈</li><li>vue3：在v2的基础上，优化一些虚拟的算法；减少一些不必要的重绘，提升渲染速度等</li></ul><h2 id="实际用法相比" tabindex="-1"><a class="header-anchor" href="#实际用法相比" aria-hidden="true">#</a> 实际用法相比</h2><h3 id="匿名插槽和具名插槽" tabindex="-1"><a class="header-anchor" href="#匿名插槽和具名插槽" aria-hidden="true">#</a> 匿名插槽和具名插槽</h3><ul><li>vue2父插槽可以写在元素上</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div slot<span class="token operator">=</span><span class="token string">&quot;left&quot;</span><span class="token operator">&gt;</span>我是插槽<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>vue3父插槽需要定义在template元素上</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>template #left<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>我是插槽<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="绑定全局变量" tabindex="-1"><a class="header-anchor" href="#绑定全局变量" aria-hidden="true">#</a> 绑定全局变量</h3><ul><li>vue2</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>main<span class="token punctuation">.</span>js

<span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$store <span class="token operator">=</span> store
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>vue3</p><ul><li>app.config.globalProperties</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>main<span class="token punctuation">.</span>js

app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>$timeFormat <span class="token operator">=</span> timeFormat
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>template中直接用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token function">$timeFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>script中</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> getCurrentInstance <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> proxy <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

proxy<span class="token punctuation">.</span><span class="token function">$timeFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>provide/inject</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>main<span class="token punctuation">.</span>js

app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">&#39;global&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">$timeFormat</span><span class="token operator">:</span> timeFormat
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>template中</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> global<span class="token punctuation">.</span><span class="token function">$timeFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>script中</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> inject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">const</span> global <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">&#39;global&#39;</span><span class="token punctuation">)</span>

global<span class="token punctuation">.</span><span class="token function">$timeFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="获取元素信息" tabindex="-1"><a class="header-anchor" href="#获取元素信息" aria-hidden="true">#</a> 获取元素信息</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token string">&quot;panelRef&quot;</span> id<span class="token operator">=</span><span class="token string">&quot;panel&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>vue2</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>panelRef
<span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>panelRef<span class="token punctuation">.</span>offsetWidth
<span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>panelRef<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">&quot;red&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>vue3</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> getCurrentInstance <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> element <span class="token operator">=</span> instance<span class="token operator">?.</span>refs<span class="token punctuation">.</span>panelRef<span class="token operator">?.</span>$el <span class="token keyword">as</span> HTMLElement
element<span class="token punctuation">.</span>offsetWidth
element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">&#39;red&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">通过ID获取</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// document.querySelector(&#39;#panel&#39;) || document.getElementById(&#39;panel&#39;)</span>
<span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;panel&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> HTMLElement
element<span class="token punctuation">.</span>offsetWidth
element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">&#39;red&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="组件间调方法" tabindex="-1"><a class="header-anchor" href="#组件间调方法" aria-hidden="true">#</a> 组件间调方法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>overlayDialog ref<span class="token operator">=</span><span class="token string">&quot;overlayDialogRef&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>overlayDialog里有一个initDialog方法</p><ul><li>vue2 正常调用</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>overlayDialogRef<span class="token punctuation">.</span><span class="token function">initDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>vue3 子组件需要defineExpose({ initDialog })</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> overlayDialogRef <span class="token operator">=</span> ref<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
overlayDialogRef<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">initDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="双向绑定" tabindex="-1"><a class="header-anchor" href="#双向绑定" aria-hidden="true">#</a> 双向绑定</h3><ul><li>vue2</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div <span class="token operator">:</span>visible<span class="token punctuation">.</span>sync<span class="token operator">=</span><span class="token string">&quot;show&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>

<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;update:visible&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>vue3</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div v<span class="token operator">-</span>model<span class="token operator">:</span>visible<span class="token operator">=</span><span class="token string">&quot;show&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>

<span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;update:visible&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用calc" tabindex="-1"><a class="header-anchor" href="#使用calc" aria-hidden="true">#</a> 使用calc</h3><p>script中，在calc中使用模板字符串计算，vue2没问题，vue3不行</p><ul><li>vue2</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>pageStyle<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">height: calc(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span> statusBarHeight <span class="token operator">*</span> <span class="token number">2</span> <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">rpx + 378rpx - 60rpx)</span><span class="token template-punctuation string">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>vue3</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> calcValue <span class="token operator">=</span> statusBarHeight <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">378</span> <span class="token operator">-</span> <span class="token number">60</span>
pageStyle<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">height: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>calcValue<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">rpx</span><span class="token template-punctuation string">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ref、reactive、toref-和-torefs" tabindex="-1"><a class="header-anchor" href="#ref、reactive、toref-和-torefs" aria-hidden="true">#</a> ref、reactive、toRef 和 toRefs</h2><ol><li>ref</li></ol><ul><li>ref是一个函数，用于创建一个包含响应式数据的引用对象。</li><li>ref函数可以接收原始数据类型与引用数据类型。</li><li>ref 函数创建的响应式数据，在模板中可以直接被使用，在JS 中需要通过.value 的形式才能使用。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 0</span>
 
count<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>reactive</li></ol><ul><li>reactive也是一个函数，用于创建一个响应式的对象。</li><li>reactive函数只能接收引用数据类型。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;Hello, Vue!&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 0</span>
 
state<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>toRef</li></ol><ul><li>toRef函数用于将一个reactive对象的某个属性转换为一个ref对象。</li><li>它接受两个参数：一个是reactive对象，另一个是要转换的属性名。</li><li>转换后的ref对象与原始reactive对象的属性保持双向绑定关系。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> toRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
 
<span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> countRef <span class="token operator">=</span> <span class="token function">toRef</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token string">&#39;count&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>countRef<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 0</span>
 
countRef<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>countRef<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>toRefs</li></ol><ul><li>toRefs函数是toRef的扩展，它用于将一个reactive对象的所有属性转换为一组ref对象。</li><li>它接受一个reactive对象作为参数，并返回一个包含所有属性ref对象的普通对象。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> toRefs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
 
<span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;Hello, Vue!&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> stateRefs <span class="token operator">=</span> <span class="token function">toRefs</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stateRefs<span class="token punctuation">.</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 0</span>
 
stateRefs<span class="token punctuation">.</span>count<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stateRefs<span class="token punctuation">.</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ref和reactive的区别" tabindex="-1"><a class="header-anchor" href="#ref和reactive的区别" aria-hidden="true">#</a> ref和reactive的区别</h3><div class="hint-container tip"><p class="hint-container-title">概念/使用方式/使用场景</p><ul><li>他们都是用来创建响应式数据的函数，接收参数，并返回一个经过响应式处理的代理对象。</li><li>ref可以接收基本数据类型和引用类型；reactive只能接收引用类型。</li><li>ref创建出来的数据在template中可以直接使用，在js中需要使用.value；reactive创建出来的数据在template和js中都可以直接使用。</li><li>ref一般用于基本数据类型；reactive一般用于处理比较复杂的对象类型。</li></ul></div>`,69),l=[o];function i(c,r){return s(),e("div",null,l)}const v=a(p,[["render",i],["__file","index.html.vue"]]);export{v as default};
